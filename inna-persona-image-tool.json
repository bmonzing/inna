[{"id":"inna_persona_image_tool","user_id":"1780e9c3-e0be-4301-bcb2-392c0d9da061","name":"inna_persona_image_tool","content":"import json\nimport os\nimport random\nfrom datetime import datetime\nfrom pathlib import Path\nfrom typing import Any, Dict, List\n\nimport requests\nfrom pydantic import BaseModel, Field\n\n\nclass Tools:\n    def __init__(self):\n        pass\n\n    def generate_persona_line_art(\n        self,\n        persona: str = Field(..., description=\"Proto-persona JSON string produced by Inna Step 3.\"),\n        persona_id: str = Field(..., description=\"Slug used for file names, e.g. 'ops_director'.\"),\n        output_dir: str = Field(\"/Users/287096/inna/persona_images\", description=\"Absolute path where generated images are saved.\"),\n        workflow_path: str = Field(\"/Users/287096/inna/line-art.json\", description=\"Path to the ComfyUI workflow JSON template.\"),\n        comfy_base_url: str = Field(\"http://127.0.0.1:8188\", description=\"Base URL for the local ComfyUI instance.\")\n    ) -> str:\n        \"\"\"Generate a single-line persona illustration via ComfyUI using the stored workflow.\"\"\"\n        try:\n            persona_data = json.loads(persona)\n        except json.JSONDecodeError as exc:\n            raise ValueError(\"Persona must be valid JSON.\") from exc\n\n        name = persona_data.get(\"name\") or persona_data.get(\"Name\") or \"Unnamed Persona\"\n        job_title = persona_data.get(\"job_title\") or persona_data.get(\"Job Title\") or \"Professional\"\n        quote = persona_data.get(\"quote\") or persona_data.get(\"Pithy Quotation\") or \"\"\n        demographics = persona_data.get(\"demographics\") or persona_data.get(\"Demographics\") or []\n        behaviors = persona_data.get(\"behaviors\") or persona_data.get(\"Behaviors\") or []\n        needs = (\n            persona_data.get(\"needs\")\n            or persona_data.get(\"Needs and Wants\")\n            or persona_data.get(\"Needs\")\n            or []\n        )\n\n        def clean_phrase(value: str, fallback: str) -> str:\n            value = (value or '' ).strip()\n            if not value:\n                return fallback\n            value = value.rstrip('.')\n            return value\n\n        demographic_phrase = clean_phrase(', '.join(demographics), 'modern professional')\n        posture_phrase = clean_phrase(behaviors[0] if behaviors else '', 'upright posture, attentive hands')\n        gesture_phrase = clean_phrase(behaviors[1] if len(behaviors) > 1 else '', 'confident gesture')\n        expression_phrase = clean_phrase(quote, 'calm focus') if len(quote.split()) <= 8 else 'calm, determined expression'\n        appearance_phrase = clean_phrase(demographics[0] if demographics else '', 'neat appearance')\n        clothing_phrase = f\"work-appropriate {job_title.lower()} attire\"\n\n        tools_phrase = clean_phrase(needs[0] if needs else '', 'laptop and organized notebook')\n        wall_phrase = clean_phrase(needs[1] if len(needs) > 1 else '', 'strategy sketches')\n        personal_phrase = clean_phrase(needs[2] if len(needs) > 2 else '', 'succulent plant')\n\n        positive_raw = (\n            f'{name}, {job_title}, seated at a desk; ' \n            f'{posture_phrase}; {expression_phrase}; {appearance_phrase}; {clothing_phrase}. ' \n            f'Minimal workspace with {tools_phrase}; wall hints ({wall_phrase}); {personal_phrase}.'\n        )\n        positive_words = positive_raw.split()\n        if len(positive_words) > 80:\n            positive_raw = ' '.join(positive_words[:80])\n\n        notes = (\n            f\"{name.split()[0] if name else 'Persona'} sits slightly angled with {posture_phrase} and {gesture_phrase}. \"\n            f\"Expression stays {expression_phrase.lower()} to match their approach. \"\n            f\"Environment stays secondary: {tools_phrase}, wall hints of {wall_phrase}, and {personal_phrase} drawn lightly.\"\n        )\n\n        render = {\n            'width': 1024,\n            'height': 1024,\n            'steps': 24,\n            'cfg': 5,\n            'seed': random.randint(10 ** 5, 10 ** 12),\n        }\n        persona_prompt = {\n            'positive_persona': positive_raw,\n            'notes_explanation': notes,\n            'render': render,\n        }\n\n        workflow_file = Path(workflow_path)\n        if not workflow_file.exists():\n            raise FileNotFoundError(f\"Workflow not found at {workflow_path}\")\n        workflow = json.loads(workflow_file.read_text(encoding='utf-8'))\n\n        prompt_template = workflow.get('10', {}).get('inputs', {}).get('text')\n        if not isinstance(prompt_template, str):\n            raise ValueError(\"Workflow missing expected prompt text at node '10'.\")\n\n        prompt_filled = (\n            prompt_template.replace('[Name]', name)\n            .replace('[Job Title]', job_title)\n            .replace('[posture and gesture]', posture_phrase)\n            .replace('[expression]', expression_phrase)\n            .replace('[appearance]', appearance_phrase)\n            .replace('[clothing]', clothing_phrase)\n            .replace('[work tools]', tools_phrase)\n            .replace('[wall artifacts]', wall_phrase)\n            .replace('[personal touches]', personal_phrase)\n        )\n\n        workflow['10']['inputs']['text'] = prompt_filled\n        workflow['12']['inputs']['seed'] = render['seed']\n        workflow['12']['inputs']['steps'] = render['steps']\n        workflow['12']['inputs']['cfg'] = render['cfg']\n\n        output_path = Path(output_dir).expanduser()\n        output_path.mkdir(parents=True, exist_ok=True)\n        filename_prefix = str(output_path / persona_id)\n        workflow['17']['inputs']['filename_prefix'] = filename_prefix\n\n        payload = {'prompt': workflow, 'client_id': f\"inna-{persona_id}-{datetime.utcnow().timestamp()}\"}\n        response = requests.post(\n            f\"{comfy_base_url.rstrip('/')}\\/prompt\",\n            json=payload,\n            timeout=30,\n        )\n        response.raise_for_status()\n\n        result = {\n            'persona_id': persona_id,\n            'positive_persona': positive_raw,\n            'notes_explanation': notes,\n            'render': render,\n            'workflow_submitted': True,\n            'output_prefix': filename_prefix,\n        }\n        return json.dumps(result, ensure_ascii=False)\n","specs":[{"name":"generate_persona_line_art","description":"Generate a persona line-art image using ComfyUI with the line-art workflow.","parameters":{"type":"object","properties":{"persona":{"type":"string","description":"Proto-persona JSON string produced by Inna Step 3."},"persona_id":{"type":"string","description":"Slug used for file names, e.g. 'ops_director'."},"output_dir":{"type":"string","description":"Absolute path where generated images are saved.","default":"/Users/287096/inna/persona_images"},"workflow_path":{"type":"string","description":"Path to the ComfyUI workflow JSON template.","default":"/Users/287096/inna/line-art.json"},"comfy_base_url":{"type":"string","description":"Base URL for the local ComfyUI instance.","default":"http://127.0.0.1:8188"}},"required":["persona","persona_id"],"additionalProperties":false}}],"meta":{"description":"Generate persona-driven line art via ComfyUI","manifest":{}},"access_control":{},"updated_at":1761113600,"created_at":1761113600}]
